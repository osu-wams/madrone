<?php

/**
 * @file
 * Functions to support theming in the Tailwind CSS theme.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_preprocess().
 */
function madrone_preprocess(&$variables, $hook) {
  try {
    $variables['is_front'] = Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $exception) {
    $variables['is_front'] = FALSE;
  }
  $variables['hide_title_front'] = theme_get_setting('madrone_front_title') ? TRUE : FALSE;
  $variables['#cache']['contexts'][] = 'url.path.is_front';
  $variables['monsido_site_id'] = theme_get_setting('madrone_monsido_site_id');
}

/**
 * Implements hook_preprocess_HOOK().
 */
function madrone_preprocess_html(&$variables) {
  $theme_color_light = [
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'theme-color',
      'media' => '(prefers-color-scheme: light)',
      'content' => '#fff',
    ],
  ];
  $theme_color_dark = [
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'theme-color',
      'media' => '(prefers-color-scheme: dark)',
      'content' => '#000',
    ],
  ];
  $variables['page']['#attached']['html_head'][] = [
    $theme_color_light,
    'madroneThemeColorLight',
  ];
  $variables['page']['#attached']['html_head'][] = [
    $theme_color_dark,
    'madroneThemeColorDark',
  ];

  // Check if the footer doesn't have any blocks and creates an empty element
  // to force the footer to always render.
  if (empty($variables['page']['footer'])) {
    $variables['page']['footer'] = [
      'force-empty-display' => [
        '#markup' => '',
      ],
      '#theme_wrappers' => ['region'],
      '#region' => 'footer',
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function madrone_preprocess_node(&$variables) {
  // Ran into an issue when using views with display as content view modes
  // rather than using fields.
  $date = $variables['node']->getCreatedTime();
  /** @var \Drupal\date_ap_style\ApStyleDateFormatter $date_ap */
  $date_ap = Drupal::service('date_ap_style.formatter');
  $variables['date'] = $date_ap->formatTimestamp($date, ['always_display_year' => TRUE]);
  if ($variables['elements']['#view_mode'] === 'full'
    && !array_key_exists('view', $variables)
    && (!is_null($variables['elements']['_layout_builder']) && count($variables['elements']['_layout_builder']) == 1)) {
    if (array_key_exists('class', $variables['attributes'])) {
      array_push($variables['attributes']['class'], 'container', 'mb-2');
    }
    else {
      $variables['attributes']['class'] = ['container', 'mb-2'];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function madrone_preprocess_block(&$variables) {
  // Variable true if current page is a group page. Used to hide main nav.
  $variables['hide_main_navigation'] = hide_main_navigation();
  // Adding a base_path variable to block template.
  $variables['base_path'] = base_path();
  // Adding region specific templates.
  if (!empty($variables['elements']['#id'])) {
    /** @var \Drupal\block\BlockInterface $block */
    $block = Drupal::entityTypeManager()
      ->getStorage('block')
      ->load($variables['elements']['#id']);
    if ($block) {
      $region = $block->getRegion();
      if ($variables['base_plugin_id'] == 'search_form_block') {
        if ($region == 'header') {
          $variables['content']['keys']['#madrone_is_header_search_submit'] = TRUE;
          $variables['content']['actions']['submit']['#madrone_is_header_search_submit'] = TRUE;
          if (in_array('contextual-region', $variables['attributes']['class'])) {
            $variables['attributes']['class'] = array_diff($variables['attributes']['class'], ['contextual-region']);
          }
        }
        elseif ($region == 'mobile_header') {
          $variables['content']['keys']['#madrone_is_mobile_search_submit'] = TRUE;
          $variables['content']['actions']['submit']['#madrone_is_mobile_search_submit'] = TRUE;
        }
      }
      if ($variables['base_plugin_id'] == 'system_branding_block') {
        $themeCrestPath = '/' . Drupal::theme()
          ->getActiveTheme()
          ->getPath() . '/assets/osu-logo-crest-only.svg';
        $variables['crest_logo'] = $themeCrestPath;
        if (array_key_exists('group_path', $variables['content']) &&
          array_key_exists('group_name', $variables['content'])) {
          $variables['group_name'] = $variables['content']['group_name']['#markup'];
          $variables['group_path'] = $variables['content']['group_path']['#uri'];
        }
        if ($region == 'header') {
          if (array_key_exists('class', $variables['attributes']) &&
            in_array('contextual-region', $variables['attributes']['class'])) {
            $variables['attributes']['class'] = array_diff($variables['attributes']['class'], ['contextual-region']);
          }
        }
      }
      $variables['content']['#attributes']['region'] = $region;
    }
  }
  // Add bundle and view_mode variables for content blocks.
  if (isset($variables['elements']['content']['#block_content'])) {
    $variables['bundle'] = $variables['elements']['content']['#block_content']->bundle();
    if (isset($variables['elements']['#configuration']['view_mode'])) {
      $variables['view_mode'] = $variables['elements']['#configuration']['view_mode'];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function madrone_preprocess_form_element(&$variables) {
  if (array_key_exists('#madrone_is_header_search_submit', $variables['element']) && $variables['element']['#madrone_is_header_search_submit']) {
    $variables['full_width'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function madrone_preprocess_input(&$variables) {
  $input_type = $variables['element']['#type'];
  switch ($input_type) {
    case 'color':
      $variables['attributes']['class'][] = 'form-control';
      $variables['attributes']['class'][] = 'form-control-color';
      break;

    case 'checkbox':
    case 'radio':
      $variables['attributes']['class'][] = 'form-check-input';
      break;

    case 'range':
      $variables['attributes']['class'][] = 'form-range';
      break;

    case 'search':
      $variables['attributes']['class'][] = 'form-control';
      break;

    // Intentionally leaving blank to not include classes.
    case 'submit':
      break;

    default:
      $variables['attributes']['class'][] = 'form-control';
      $variables['attributes']['class'][] = 'my-3';
      break;

  }
  $variables['type'] = $input_type;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function madrone_preprocess_field(&$variables) {
  $element = $variables['element'];
  if (isset($element['#field_name'])) {
    $field_name = $element['#field_name'];
    $bundle = $element['#bundle'];
    // Add classes to our two fields for Story content type to make the
    // links button.
    if ($bundle === 'story' && ($field_name === 'field_osu_organizations' || $field_name === 'field_tags')) {
      foreach ($variables['items'] as $index => $item) {
        $variables['items'][$index]['content']['#options']['attributes']['class'][] = 'btn';
        $variables['items'][$index]['content']['#options']['attributes']['class'][] = 'btn-primary';
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function madrone_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['actions']['submit']) && (count($form['actions'])) <= 2) {
    $form['actions']['submit']['#attributes']['class'][] = 'button--primary';
  }
  switch ($form_id) {
    case 'search_block_form':
      $form['keys']['#attributes']['placeholder'] = t('Search');
      $form['keys']['#attributes']['size'] = 25;
      break;

    case 'search_form':
      $form['basic']['keys']['#attributes']['placeholder'] = t('Search');
      $form['basic']['submit']['#attributes']['class'][] = 'button--primary';
      $form['advanced']['submit']['#attributes']['class'][] = 'button--primary';
      break;

    case 'views_exposed_form':
      $form['actions']['submit']['#attributes']['class'][] = 'button--primary';
      break;

    // For new sections setup some defaults for spacing.
    case 'layout_builder_configure_section':
      $is_new_section = $form['actions']['submit']['#value']->getUntranslatedString() === 'Add section';
      if ($is_new_section) {
        $form['layout_settings']['ui']['tab_content']['layout']['container_type']['#default_value'] = 'container-fluid';
        $form['layout_settings']['ui']['tab_content']['layout']['remove_gutters']['#default_value'] = 0;
        $form['layout_settings']['ui']['tab_content']['appearance']['spacing']['padding']['#default_value'] = 2;
      }
      break;

    // For New Blocks.
    case 'layout_builder_add_block':
      // Set label to a value and uncheck the display checkbox.
      $form['settings']['label']['#default_value'] = 'In-line Block';
      $form['settings']['label_display']['#default_value'] = FALSE;
      // For updates to Bootstrap Layout Builder Blocks.
      $form['ui']['tab_content']['appearance']['spacing']['padding']['#default_value'] = 1;
      $form['ui']['tab_content']['appearance']['spacing']['margin']['#default_value'] = 1;
      break;
  }
  // Check if we are in a layout builder form.
  $route_object = Drupal::routeMatch()->getRouteObject();
  if (!is_null($route_object)) {
    if ($route_object->getOption('_layout_builder')) {
      $form['#attributes']['class'][] = 'container';
    }
  }

}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function madrone_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (!empty($variables['elements']['#id'])) {
    /** @var \Drupal\block\BlockInterface $block */
    $block = Drupal::entityTypeManager()
      ->getStorage('block')
      ->load($variables['elements']['#id']);
    if ($block) {
      // Get the region the block is in.
      $region = $block->getRegion();
      $suggestions[] = 'block__' . $region;
      $suggestions[] = 'block__' . $region . '__' . 'plugin_id' . '__' . $variables['elements']['#plugin_id'];
      $suggestions[] = 'block__' . $region . '__' . 'id' . '__' . $variables['elements']['#id'];
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function madrone_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#madrone_is_header_search_submit'] ?? FALSE) {
    $suggestions[] = $variables['theme_hook_original'] . '__header_search';
  }
  if ($variables['element']['#madrone_is_mobile_search_submit'] ?? FALSE) {
    $suggestions[] = $variables['theme_hook_original'] . '__mobile_search';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function madrone_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $form_id = $variables['element']['#form_id'];
  $suggestions[] = 'form__' . $form_id;
  if (isset($variables['element']['#attributes']['region'])) {
    $region = $variables['element']['#attributes']['region'];
    $suggestions[] = 'form__' . $region . '__' . $form_id;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function madrone_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  if (array_key_exists('#id', $variables['element']) && $variables['element']['#id'] === 'admin-toolbar-search-input') {
    $suggestions[] = $variables['theme_hook_original'] . '__' . 'admin_toolbar_search';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function madrone_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  if (isset($variables['attributes']['region'])) {
    $region = str_replace('-', '_', $variables['attributes']['region']);
    $suggestions[] = 'menu__' . $region;
    $suggestions[] = $variables['theme_hook_original'] . '__' . $region;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function madrone_theme_suggestions_filter_caption_alter(array &$suggestions, array $variables) {
  $classes = explode(' ', $variables['classes']);
  $view_mode = '';
  foreach ($classes as $class) {
    if (str_contains($class, 'view-mode--')) {
      $view_mode = substr($class, strlen('view-mode--'));
    }
  }
  if (!empty($view_mode)) {
    $suggestions[] = $variables['theme_hook_original'] . '__' . $view_mode;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function madrone_preprocess_menu_local_task(&$variables) {
  $variables['link']['#options']['attributes']['class'][] = 'nav-link';
  if (!empty($variables['element']['#active'])) {
    $variables['link']['#options']['attributes']['class'][] = 'active';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function madrone_preprocess_menu_local_action(&$variables) {
  $remove_button_classes = ['button', 'button-action'];
  $link_classes = $variables['link']['#options']['attributes']['class'];
  $variables['link']['#options']['attributes']['class'] = array_diff($link_classes, $remove_button_classes);
  $variables['link']['#options']['attributes']['class'][] = 'btn';
  $variables['link']['#options']['attributes']['class'][] = 'osu-btn-primary';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function madrone_theme_suggestions_image_style_alter(array &$suggestions, array $variables) {
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['style_name'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function madrone_theme_suggestions_image_alter(array &$suggestions, array $variables) {
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['style_name'];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function madrone_preprocess_superfish(&$variables) {
  $superfish_menu_classes = explode(' ', $variables['menu_classes']);
  $superfish_menu_classes[] = "nav";
  $variables['menu_classes'] = implode(" ", $superfish_menu_classes);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function madrone_preprocess_superfish_menu_items(&$variables) {
  foreach ($variables['menu_items'] as &$menu_item) {
    /** @var \Drupal\Core\Template\Attribute $menu_item_attributes */
    $menu_item_attributes = $menu_item['attributes'];
    /** @var \Drupal\Core\Template\AttributeValueBase $menu_item_classes */
    $menu_item_classes = $menu_item_attributes->getClass();
    // Add the nav-item to all the li's of superfish menu.
    $menu_item_classes[] = 'nav-item';
    $menu_item_attributes->setAttribute('class', $menu_item_classes);
    // Add the nav-link class to all links in superfish.
    $menu_item['link']['#options']['attributes']['class'][] = 'nav-link';
    $menu_item['link_menuparent']['#options']['attributes']['class'][] = 'nav-link';
  }
}

/**
 * Helper function to check if current page shows main nav menu or group menu.
 *
 * @return bool
 *   True if current page is in a group
 *   and that group has field_hide_global_navigation on
 *   False if any of the above conditions are false
 */
function hide_main_navigation(): bool {
  if (Drupal::service('module_handler')->moduleExists('osu_groups')) {
    if ($node = Drupal::routeMatch()->getParameter('node')) {
      /** @var \Drupal\osu_groups\OsuGroupsHandler $osu_groups */
      $osu_groups = Drupal::service('osu_groups.group_handler');
      $group_content = $osu_groups->getGroupContentFromNode($node);
      if ($group_content) {
        $group = $group_content->getGroup();
        if ($group->hasField('field_hide_global_navigation')) {
          return (bool) $group->get('field_hide_global_navigation')
            ->first()
            ->getValue()['value'];
        }
      }
    }
    elseif ($group = Drupal::routeMatch()->getParameter('group')) {
      if ($group->hasField('field_hide_global_navigation')) {
        return (bool) $group->get('field_hide_global_navigation')
          ->first()
          ->getValue()['value'];
      }
    }
  }

  return FALSE;
}
