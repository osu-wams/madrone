<?php

/**
 * @file
 * Functions to support theming in the Tailwind CSS theme.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\group\Entity\GroupContent;
use Drupal\block\Entity\Block;

/**
 * Implements hook_preprocess().
 */
function madrone_preprocess(&$variables, $hook) {
  // Check if node is set
  // and that it is an instance of Content Entity Interface.
  if (isset($variables['node']) && $variables['node'] instanceof ContentEntityInterface) {
    $nodeGroups = GroupContent::loadByEntity($variables['node']);
    if (!empty($nodeGroups)) {
      foreach ($nodeGroups as $group) {
        $variables['in_group'] = TRUE;
        $variables['groups'][] = $group->getGroup()->label();
      }
    }
    else {
      $variables['in_group'] = FALSE;
    }
  }
  try {
    $variables['is_front'] = Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $exception) {
    $variables['is_front'] = FALSE;
  }
  $variables['hide_title_front'] = theme_get_setting('madrone_front_title') ? TRUE : FALSE;
  $variables['#cache']['contexts'][] = 'url.path.is_front';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function madrone_preprocess_block(&$variables) {
  // Adding a base_path variable to block template.
  $variables['base_path'] = base_path();
  // Adding region specific templates.
  if (!empty($variables['elements']['#id'])) {
    /** @var \Drupal\block\BlockInterface $block */
    $block = Drupal::entityTypeManager()
      ->getStorage('block')
      ->load($variables['elements']['#id']);
    if ($block) {
      $region = $block->getRegion();
      if ($variables['base_plugin_id'] == 'search_form_block') {
        if ($region == 'header') {
          $variables['content']['keys']['#madrone_is_header_search_submit'] = TRUE;
          $variables['content']['actions']['submit']['#madrone_is_header_search_submit'] = TRUE;
        }
        elseif ($region == 'mobile_nav_menu') {
          $variables['content']['keys']['#madrone_is_mobile_search_submit'] = TRUE;
          $variables['content']['actions']['submit']['#madrone_is_mobile_search_submit'] = TRUE;
        }
      }

      if ($variables['base_plugin_id'] == 'system_branding_block') {
        $themeCrestPath = '/' . Drupal::theme()
          ->getActiveTheme()
          ->getPath() . '/assets/osu-logo-crest-only.svg';
        $variables['crest_logo'] = $themeCrestPath;
      }
    }
  }
  $variables['content']['#attributes']['block'] = $variables['elements']['#id'];
}

/**
 * Implements hook_form_alter().
 */
function madrone_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'search_block_form':
      $form['keys']['#attributes']['placeholder'] = t('Search');
      break;

    case 'search_form':
      $form['basic']['keys']['#attributes']['placeholder'] = t('Search');
      break;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function madrone_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (!empty($variables['elements']['#id'])) {
    /** @var \Drupal\block\BlockInterface $block */
    $block = Drupal::entityTypeManager()
      ->getStorage('block')
      ->load($variables['elements']['#id']);
    if ($block) {

      // Get the region the block is in.
      $region = $block->getRegion();
      $suggestions[] = 'block__' . $region;
      $suggestions[] = 'block__' . $region . '__' . 'plugin_id' . '__' . $variables['elements']['#plugin_id'];
      $suggestions[] = 'block__' . $region . '__' . 'id' . '__' . $variables['elements']['#id'];
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function madrone_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#madrone_is_header_search_submit'] ?? FALSE) {
    $suggestions[] = $variables['theme_hook_original'] . '__header_search';
  }
  if ($variables['element']['#madrone_is_mobile_search_submit'] ?? FALSE) {
    $suggestions[] = $variables['theme_hook_original'] . '__mobile_search';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function madrone_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#form_id'] == 'search_block_form') {
    $suggestions[] = 'form__search_block_form';
  }

  if (array_key_exists('block', $variables['element']['#attributes'])) {
    /** @var \Drupal\block\BlockInterface $block */
    $block = Drupal::entityTypeManager()
      ->getStorage('block')
      ->load($variables['element']['#attributes']['block']);
    if ($block) {
      $region = $block->getRegion();
      $suggestions[] = 'form__' . $region . '__search_block_form';
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function madrone_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  // Remove the block and replace dashes with underscores in the block ID to
  // use for the hook name.
  if (isset($variables['attributes']['block'])) {
    $hook = str_replace(['block-', '-'], ['', '_'], $variables['attributes']['block']);
    $block = Block::load($hook);
    $region = $block->getRegion();
    $suggestions[] = $variables['theme_hook_original'] . '__' . $region . '__' . $hook;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function madrone_preprocess_menu_local_task(&$variables) {
  $variables['link']['#options']['attributes']['class'][] = 'tw-no-underline';
}
