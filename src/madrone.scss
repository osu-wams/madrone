@import "../node_modules/bootstrap/scss/functions";

// Import of User Variables.
@import "scss/osu_variables";
@import "../node_modules/bootstrap/scss/variables";
@import "../node_modules/bootstrap/scss/maps";
@import "../node_modules/bootstrap/scss/mixins";
@import "../node_modules/bootstrap/scss/utilities";

@font-face {
  font-family: "Stratum2Web";
  src: url("../fonts/Stratum2WebThin.woff") format("woff"),
  url("../fonts/Stratum2WebThin.woff2") format("woff2");
  font-weight: 200;
  font-style: normal;
}

@font-face {
  font-family: "Stratum2Web";
  src: url("../fonts/Stratum2WebLight.woff") format("woff"),
  url("../fonts/Stratum2WebLight.woff2") format("woff2");
  font-weight: 300;
  font-style: normal;
}

@font-face {
  font-family: "Stratum2Web";
  src: url("../fonts/Stratum2WebRegular.woff") format("woff"),
  url("../fonts/Stratum2WebRegular.woff2") format("woff2");
  font-weight: 400;
  font-style: normal;
}

@font-face {
  font-family: "Stratum2Web";
  src: url("../fonts/Stratum2WebMedium.woff") format("woff"),
  url("../fonts/Stratum2WebMedium.woff2") format("woff2");
  font-weight: 500;
  font-style: normal;
}

@font-face {
  font-family: "Stratum2Web";
  src: url("../fonts/Stratum2WebBold.woff") format("woff"),
  url("../fonts/Stratum2WebBold.woff2") format("woff2");
  font-weight: 700;
  font-style: normal;
}

@font-face {
  font-family: "Stratum2Web";
  src: url("../fonts/Stratum2WebBlack.woff") format("woff"),
  url("../fonts/Stratum2WebBlack.woff2") format("woff2");
  font-weight: 900;
  font-style: normal;
}

$utilities: map-merge-multiple(
    $utilities,
    (
      "color":
      map-merge(
          map-get($utilities, "color"),
          (
            values:
            map-merge(
                map-get(map-get($utilities, "color"), "values"),
                $osu-colors-text
            )
          )
      ),
      "osu-text-colors": (
        property: color,
        class: osu-text,
        values: $osu-colors-text
      )
    ),
    (
      "background-color": (
        property: background-color,
        class: bg,
        values:
        map-merge-multiple(
            $osu-colors-all,
            (
              "transparent": transparent
            )
        )
      ),
      "osu-background-color": (
        property: background-color,
        class: osu-bg,
        values:
        map-merge-multiple(
            $osu-bg-colors,
            (
              "menu": $neutral-200
            ),
            (
              "transparent": transparent
            )
        )
      )
    ),
    (
      "osu-shadows": (
        property: box-shadow,
        class: osu-shadow,
        values: (
          null: 0 2px 3px rgb(0 0 0 / 25%)
        )
      )
    ),
    (
      "border-color": (
        property: border-color,
        class: border,
        values: map-merge($theme-colors, $osu-colors-all)
      )
    ),
    (
      "osu-border-width": (
        property: border-width,
        class: osu-border-width,
        values: (
          map-merge-multiple(
              (0: 0),
              map-get(map-get($utilities, "border-width"), "values")
          )
        )
      )
    ),
    (
      "osu-border-width-top": (
        property: border-top-width,
        class: osu-border-width-top,
        values: (
          map-merge-multiple(
              (0: 0),
              map-get(map-get($utilities, "border-width"), "values")
          )
        )
      )
    ),
    (
      "osu-border-width-right": (
        property: border-right-width,
        class: osu-border-width-right,
        values: (
          map-merge-multiple(
              (0: 0),
              map-get(map-get($utilities, "border-width"), "values")
          )
        )
      )
    ),
    (
      "osu-border-width-bottom": (
        property: border-bottom-width,
        class: osu-border-width-bottom,
        values: (
          map-merge-multiple(
              (0: 0),
              map-get(map-get($utilities, "border-width"), "values")
          )
        )
      )
    ),
    (
      "osu-border-width-left": (
        property: border-left-width,
        class: osu-border-width-left,
        values: (
          map-merge-multiple(
              (0: 0),
              map-get(map-get($utilities, "border-width"), "values")
          )
        )
      )
    ),
    (
      "font-family": (
        property: font-family,
        class: font,
        values:
        map-merge(
            map-get(map-get($utilities, "font-family"), "values"),
            (
              "stratum2web": (
                "Stratum2Web",
                serif
              )
            )
        )
      )
    ),
    (
      "margin": map-merge(
          map-get($utilities, "margin"),
          (
            values: map-merge(
                map-get(map-get($utilities, "margin"), "values"),
                (6: 1rem * 5)
            )
          )
      )
    ),
    (
      "margin-x": map-merge(
          map-get($utilities, "margin-x"),
          (
            values: map-merge(
                map-get(map-get($utilities, "margin-x"), "values"),
                (6: 1rem * 5)
            )
          )
      )
    ),
    (
      "margin-y": map-merge(
          map-get($utilities, "margin-y"),
          (
            values: map-merge(
                map-get(map-get($utilities, "margin-y"), "values"),
                (6: 1rem * 5)
            )
          )
      )
    ),
    (
      "margin-top": map-merge(
          map-get($utilities, "margin-top"),
          (
            values: map-merge(
                map-get(map-get($utilities, "margin-top"), "values"),
                (6: 1rem * 5)
            )
          )
      )
    ),
    (
      "margin-end": map-merge(
          map-get($utilities, "margin-end"),
          (
            values: map-merge(
                map-get(map-get($utilities, "margin-end"), "values"),
                (6: 1rem * 5)
            )
          )
      )
    ),
    (
      "margin-bottom": map-merge(
          map-get($utilities, "margin-bottom"),
          (
            values: map-merge(
                map-get(map-get($utilities, "margin-bottom"), "values"),
                (6: 1rem * 5)
            )
          )
      )
    ),
    (
      "margin-start": map-merge(
          map-get($utilities, "margin-start"),
          (
            values: map-merge(
                map-get(map-get($utilities, "margin-start"), "values"),
                (6: 1rem * 5)
            )
          )
      )
    ),
    (
      "padding": map-merge(
          map-get($utilities, "padding"),
          (
            values: map-merge(
                map-get(map-get($utilities, "padding"), "values"),
                (6: 1rem * 5)
            )
          )
      )
    ),
    (
      "padding-x": map-merge(
          map-get($utilities, "padding-x"),
          (
            values: map-merge(
                map-get(map-get($utilities, "padding-x"), "values"),
                (6: 1rem * 5)
            )
          )
      )
    ),
    (
      "padding-y": map-merge(
          map-get($utilities, "padding-y"),
          (
            values: map-merge(
                map-get(map-get($utilities, "padding-y"), "values"),
                (6: 1rem * 5)
            )
          )
      )
    ),
    (
      "padding-top": map-merge(
          map-get($utilities, "padding-top"),
          (
            values: map-merge(
                map-get(map-get($utilities, "padding-top"), "values"),
                (6: 1rem * 5)
            )
          )
      )
    ),
    (
      "padding-end": map-merge(
          map-get($utilities, "padding-end"),
          (
            values: map-merge(
                map-get(map-get($utilities, "padding-end"), "values"),
                (6: 1rem * 5)
            )
          )
      )
    ),
    (
      "padding-bottom": map-merge(
          map-get($utilities, "padding-bottom"),
          (
            values: map-merge(
                map-get(map-get($utilities, "padding-bottom"), "values"),
                (6: 1rem * 5)
            )
          )
      )
    ),
    (
      "padding-start": map-merge(
          map-get($utilities, "padding-start"),
          (
            values: map-merge(
                map-get(map-get($utilities, "padding-start"), "values"),
                (6: 1rem * 5)
            )
          )
      )
    ),
    (
      "gap": map-merge(
          map-get($utilities, "gap"),
          (
            values: map-merge(
                map-get(map-get($utilities, "gap"), "values"),
                (6: 1rem * 5)
            )
          )
      )
    )
);

@import "../node_modules/bootstrap/scss/bootstrap";
@import "scss/osu_mixins";
@import "scss/osu_utilities";

/** Bootstrap v4 shim class for layout builder. */
.no-gutters {
  --bs-gutter-x: 0;
  --bs-gutter-y: 0;
}

/** Theme Defaults **/
h1 {
  color: rgba($osuorange, 1);
  font-family: "Stratum2Web", serif;
  @include font-size(3rem);
  font-weight: 500;
}

h2 {
  font-family: "Stratum2Web", serif;
  @include font-size(2.25rem);
  font-weight: 400;
}

h3 {
  color: rgba($osuorange, 1);
  font-family: "Open Sans", sans-serif;
  @include font-size(1.75rem);
  font-weight: 500;
}

h4 {
  font-family: "Open Sans", sans-serif;
  @include font-size(1.375rem);
  font-weight: 600;
}

h5 {
  font-family: "Open Sans", sans-serif;
  @include font-size(1.25rem);
  font-weight: 600;
}

h6 {
  font-family: "Open Sans", sans-serif;
  @include font-size(1.125rem);
  font-weight: 600;
}

a {
  text-decoration-color: rgba($osuorange, 1);
  text-decoration-thickness: 10%;
  text-underline-offset: 2px;

  &:hover,
  &:focus {
    text-decoration: none;
  }

  &:active:not(#osu-logo-wide, #osu-logo-crest) {
    background-color: $paddletailblack;
    color: $bucktoothwhite;
  }

  &.nav-link:hover,
  &.nav-link:focus {
    background: rgb(0 0 0 / 70%);
  }

  &.button {
    @extend .btn;
    @extend .rounded-pill;
    @extend .px-5;
    @extend .my-3;
    @extend .osu-btn-primary;
  }
}

p:last-child {
  margin-bottom: 0;
}

hr {
  margin-block: 3rem;
}

//main .block-page-title-block {
//  margin-inline: auto;
//  max-width: 62rem;
//
//  > .block__content {
//    overflow-wrap: anywhere;
//    text-align: center;
//    word-break: normal;
//
//    > h1 {
//      margin-block: 1rem;
//    }
//  }
//}
main .block-page-title-block {
  > .block__content {
    > h1 {
      margin-block: 1rem;
      margin-inline: auto;
      max-width: 62rem;
      overflow-wrap: anywhere;
      text-align: center;
      word-break: normal;
    }
  }
}

.block-system-main-block {
  ul:not(.nav, .navbar, .list-unstyled, .contextual-links, .vertical-tabs__menu, .pager__items) > li {
    &::marker {
      color: rgba($body-color, 1);
      content: "\f054\2000";
      display: inline-block;
      font-family: "Font Awesome 5 Free";
      font-weight: 900;
      letter-spacing: normal;
    }
  }

  // Force the unordered list marker to be white when using the light color text.
  .osu-text-bucktoothwhite {
    ul:not(.nav, .navbar, .list-unstyled, .contextual-links, .vertical-tabs__menu, .pager__items) > li {
      &::marker {
        color: $bucktoothwhite;
      }
    }
  }
}

em.placeholder {
  background-color: unset;
  cursor: unset;
  display: unset;
  min-height: unset;
  opacity: unset;
  vertical-align: unset;
}

blockquote {
  border: 5px solid $neutral-200;
  font-family: Georgia, "DejaVu Serif", serif;
  font-size: 1.25rem;
  margin-block: 1.5rem;
  padding: 2.5em 3.75em;
}

code {
  background-color: #fff;
  padding: 0.5em 0.25em;
}

/** Only force link color if the parent block has a dark bg set.*/
.osu-text-bucktoothwhite > * {
  a:not(.layout-builder__link--add, .btn) {
    color: $bucktoothwhite;
    text-decoration-color: $bucktoothwhite;

    &:active {
      background-color: $bucktoothwhite;
      color: $paddletailblack;
    }
  }
}

@import "scss/osu_header";
@import "scss/osu_breadcrumbs";
@import "scss/osu_footer";
@import "scss/superfish";
@import "scss/osu_forms";
@import "scss/osu_group_menus";
@import "scss/osu_group_operations";
@import "scss/pager";
@import "scss/osu_buttons";
@import "scss/osu_dropbuttons";
@import "scss/osu_media";
@import "scss/osu_messages";
@import "scss/osu_preview";
@import "scss/osu_tables";
@import "scss/osu_layout_builder";
@import "scss/osu_layout_builder_menus";
@import "scss/osu_ckeditor";
@import "scss/osu_tags";
@import "scss/osu_modals";
@import "scss/osu_tocjs";
@import "scss/osu_story";
@import "scss/osu_cards";
@import "scss/osu_menubar";
